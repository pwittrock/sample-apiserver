/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by genwiring. Do not edit it manually!

package apis

import (
	"github.com/pwittrock/apiserver-helloworld/apis/hyrule"
	"github.com/pwittrock/apiserver-helloworld/apis/hyrule/v1"
	"k8s.io/apimachinery/pkg/apimachinery/announced"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apiserver-builder/pkg/defaults"
	"k8s.io/apiserver/pkg/storage/names"
)

// Use the default strategy.  To override - in another file - define the struct HyruleCastleStrategy and regenerate code
var singletonHyruleCastleStrategy = &DefaultHyruleCastleStrategy{
	defaults.BasicCreateDeleteUpdateStrategy{defaults.Scheme, names.SimpleNameGenerator},
}

// Default Strategy for HyruleCastle
type DefaultHyruleCastleStrategy struct {
	// Inherit the basic create, delete, update strategy.
	defaults.BasicCreateDeleteUpdateStrategy
}

// NewFunc returns a new empty HyruleCastle
func (r *DefaultHyruleCastleStrategy) NewFunc() runtime.Object {
	return &hyrule.HyruleCastle{}
}

// NewListFunc returns a new empty List of HyruleCastle
func (r *DefaultHyruleCastleStrategy) NewListFunc() runtime.Object {
	return &hyrule.HyruleCastleList{}
}

// ObjectNameFunc returns the name for a HyruleCastle
func (r *DefaultHyruleCastleStrategy) ObjectNameFunc(obj runtime.Object) (string, error) {
	return obj.(*hyrule.HyruleCastle).Name, nil
}

// Definition used to register v1HyruleCastle with the apiserver
var v1HyruleCastleApiDefinition = &defaults.ResourceDefinition{
	v1.SchemeGroupVersion.WithResource("hyrulecastles"),
	singletonHyruleCastleStrategy,
	singletonHyruleCastleStrategy,
	singletonHyruleCastleStrategy,
	singletonHyruleCastleStrategy,
	singletonHyruleCastleStrategy.BasicMatch,
}

// Order list of version preferences
var hyruleVersionPreferenceOrder = []string{
	v1.SchemeGroupVersion.Version}
var hyruleVersionToSchemeFunc = announced.VersionToSchemeFunc{
	v1.SchemeGroupVersion.Version: v1.AddToScheme}

type hyruleProvider struct{}

func GetHyruleProvider() defaults.ResourceDefinitionProvider {
	return &hyruleProvider{}
}

func (w *hyruleProvider) GetResourceDefinitions() []*defaults.ResourceDefinition {
	return []*defaults.ResourceDefinition{
		v1HyruleCastleApiDefinition}
}

func (w *hyruleProvider) GetLegacyCodec() []schema.GroupVersion {
	return []schema.GroupVersion{
		v1.SchemeGroupVersion}
}

func (w *hyruleProvider) GetGroupName() string {
	return "hyrule.k8s.io"
}

func (w *hyruleProvider) GetVersionPreferenceOrder() []string {
	return hyruleVersionPreferenceOrder
}

func (w *hyruleProvider) GetImportPrefix() string {
	return "github.com/pwittrock/apiserver-helloworld/apis/hyrule"
}

func (w *hyruleProvider) SchemeFunc() announced.SchemeFunc {
	return hyrule.AddToScheme
}

func (w *hyruleProvider) VersionToSchemeFunc() announced.VersionToSchemeFunc {
	return hyruleVersionToSchemeFunc
}

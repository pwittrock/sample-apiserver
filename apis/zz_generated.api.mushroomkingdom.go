/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by genwiring. Do not edit it manually!

package apis

import (
	"github.com/pwittrock/apiserver-helloworld/apis/mushroomkingdom"
	"github.com/pwittrock/apiserver-helloworld/apis/mushroomkingdom/v2"
	"k8s.io/apimachinery/pkg/apimachinery/announced"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apiserver-builder/pkg/defaults"
	"k8s.io/apiserver/pkg/storage/names"
)

// Use the default strategy.  To override - in another file - define the struct PeachesCastleStrategy and regenerate code
var singletonPeachesCastleStrategy = &DefaultPeachesCastleStrategy{
	defaults.BasicCreateDeleteUpdateStrategy{defaults.Scheme, names.SimpleNameGenerator},
}

// Default Strategy for PeachesCastle
type DefaultPeachesCastleStrategy struct {
	// Inherit the basic create, delete, update strategy.
	defaults.BasicCreateDeleteUpdateStrategy
}

// NewFunc returns a new empty PeachesCastle
func (r *DefaultPeachesCastleStrategy) NewFunc() runtime.Object {
	return &mushroomkingdom.PeachesCastle{}
}

// NewListFunc returns a new empty List of PeachesCastle
func (r *DefaultPeachesCastleStrategy) NewListFunc() runtime.Object {
	return &mushroomkingdom.PeachesCastleList{}
}

// ObjectNameFunc returns the name for a PeachesCastle
func (r *DefaultPeachesCastleStrategy) ObjectNameFunc(obj runtime.Object) (string, error) {
	return obj.(*mushroomkingdom.PeachesCastle).Name, nil
}

// Definition used to register v2PeachesCastle with the apiserver
var v2PeachesCastleApiDefinition = &defaults.ResourceDefinition{
	v2.SchemeGroupVersion.WithResource("peachescastles"),
	singletonPeachesCastleStrategy,
	singletonPeachesCastleStrategy,
	singletonPeachesCastleStrategy,
	singletonPeachesCastleStrategy,
	singletonPeachesCastleStrategy.BasicMatch,
}

// Order list of version preferences
var mushroomkingdomVersionPreferenceOrder = []string{
	v2.SchemeGroupVersion.Version}
var mushroomkingdomVersionToSchemeFunc = announced.VersionToSchemeFunc{
	v2.SchemeGroupVersion.Version: v2.AddToScheme}

type mushroomkingdomProvider struct{}

func GetMushroomkingdomProvider() defaults.ResourceDefinitionProvider {
	return &mushroomkingdomProvider{}
}

func (w *mushroomkingdomProvider) GetResourceDefinitions() []*defaults.ResourceDefinition {
	return []*defaults.ResourceDefinition{
		v2PeachesCastleApiDefinition}
}

func (w *mushroomkingdomProvider) GetLegacyCodec() []schema.GroupVersion {
	return []schema.GroupVersion{
		v2.SchemeGroupVersion}
}

func (w *mushroomkingdomProvider) GetGroupName() string {
	return "mushroomkingdom.k8s.io"
}

func (w *mushroomkingdomProvider) GetVersionPreferenceOrder() []string {
	return mushroomkingdomVersionPreferenceOrder
}

func (w *mushroomkingdomProvider) GetImportPrefix() string {
	return "github.com/pwittrock/apiserver-helloworld/apis/mushroomkingdom"
}

func (w *mushroomkingdomProvider) SchemeFunc() announced.SchemeFunc {
	return mushroomkingdom.AddToScheme
}

func (w *mushroomkingdomProvider) VersionToSchemeFunc() announced.VersionToSchemeFunc {
	return mushroomkingdomVersionToSchemeFunc
}

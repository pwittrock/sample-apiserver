/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package internalversion

import (
	hyrulekingdom "github.com/pwittrock/apiserver-helloworld/pkg/apis/hyrulekingdom"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ZeldasCastleStatusLister helps list ZeldasCastleStatuses.
type ZeldasCastleStatusLister interface {
	// List lists all ZeldasCastleStatuses in the indexer.
	List(selector labels.Selector) (ret []*hyrulekingdom.ZeldasCastleStatus, err error)
	// ZeldasCastleStatuses returns an object that can list and get ZeldasCastleStatuses.
	ZeldasCastleStatuses(namespace string) ZeldasCastleStatusNamespaceLister
	ZeldasCastleStatusListerExpansion
}

// zeldasCastleStatusLister implements the ZeldasCastleStatusLister interface.
type zeldasCastleStatusLister struct {
	indexer cache.Indexer
}

// NewZeldasCastleStatusLister returns a new ZeldasCastleStatusLister.
func NewZeldasCastleStatusLister(indexer cache.Indexer) ZeldasCastleStatusLister {
	return &zeldasCastleStatusLister{indexer: indexer}
}

// List lists all ZeldasCastleStatuses in the indexer.
func (s *zeldasCastleStatusLister) List(selector labels.Selector) (ret []*hyrulekingdom.ZeldasCastleStatus, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*hyrulekingdom.ZeldasCastleStatus))
	})
	return ret, err
}

// ZeldasCastleStatuses returns an object that can list and get ZeldasCastleStatuses.
func (s *zeldasCastleStatusLister) ZeldasCastleStatuses(namespace string) ZeldasCastleStatusNamespaceLister {
	return zeldasCastleStatusNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ZeldasCastleStatusNamespaceLister helps list and get ZeldasCastleStatuses.
type ZeldasCastleStatusNamespaceLister interface {
	// List lists all ZeldasCastleStatuses in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*hyrulekingdom.ZeldasCastleStatus, err error)
	// Get retrieves the ZeldasCastleStatus from the indexer for a given namespace and name.
	Get(name string) (*hyrulekingdom.ZeldasCastleStatus, error)
	ZeldasCastleStatusNamespaceListerExpansion
}

// zeldasCastleStatusNamespaceLister implements the ZeldasCastleStatusNamespaceLister
// interface.
type zeldasCastleStatusNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ZeldasCastleStatuses in the indexer for a given namespace.
func (s zeldasCastleStatusNamespaceLister) List(selector labels.Selector) (ret []*hyrulekingdom.ZeldasCastleStatus, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*hyrulekingdom.ZeldasCastleStatus))
	})
	return ret, err
}

// Get retrieves the ZeldasCastleStatus from the indexer for a given namespace and name.
func (s zeldasCastleStatusNamespaceLister) Get(name string) (*hyrulekingdom.ZeldasCastleStatus, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(hyrulekingdom.Resource("zeldascastlestatus"), name)
	}
	return obj.(*hyrulekingdom.ZeldasCastleStatus), nil
}

/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package internalversion

import (
	hyrulekingdom "github.com/pwittrock/apiserver-helloworld/pkg/apis/hyrulekingdom"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ZeldasCastleLister helps list ZeldasCastles.
type ZeldasCastleLister interface {
	// List lists all ZeldasCastles in the indexer.
	List(selector labels.Selector) (ret []*hyrulekingdom.ZeldasCastle, err error)
	// ZeldasCastles returns an object that can list and get ZeldasCastles.
	ZeldasCastles(namespace string) ZeldasCastleNamespaceLister
	ZeldasCastleListerExpansion
}

// zeldasCastleLister implements the ZeldasCastleLister interface.
type zeldasCastleLister struct {
	indexer cache.Indexer
}

// NewZeldasCastleLister returns a new ZeldasCastleLister.
func NewZeldasCastleLister(indexer cache.Indexer) ZeldasCastleLister {
	return &zeldasCastleLister{indexer: indexer}
}

// List lists all ZeldasCastles in the indexer.
func (s *zeldasCastleLister) List(selector labels.Selector) (ret []*hyrulekingdom.ZeldasCastle, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*hyrulekingdom.ZeldasCastle))
	})
	return ret, err
}

// ZeldasCastles returns an object that can list and get ZeldasCastles.
func (s *zeldasCastleLister) ZeldasCastles(namespace string) ZeldasCastleNamespaceLister {
	return zeldasCastleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ZeldasCastleNamespaceLister helps list and get ZeldasCastles.
type ZeldasCastleNamespaceLister interface {
	// List lists all ZeldasCastles in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*hyrulekingdom.ZeldasCastle, err error)
	// Get retrieves the ZeldasCastle from the indexer for a given namespace and name.
	Get(name string) (*hyrulekingdom.ZeldasCastle, error)
	ZeldasCastleNamespaceListerExpansion
}

// zeldasCastleNamespaceLister implements the ZeldasCastleNamespaceLister
// interface.
type zeldasCastleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ZeldasCastles in the indexer for a given namespace.
func (s zeldasCastleNamespaceLister) List(selector labels.Selector) (ret []*hyrulekingdom.ZeldasCastle, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*hyrulekingdom.ZeldasCastle))
	})
	return ret, err
}

// Get retrieves the ZeldasCastle from the indexer for a given namespace and name.
func (s zeldasCastleNamespaceLister) Get(name string) (*hyrulekingdom.ZeldasCastle, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(hyrulekingdom.Resource("zeldascastle"), name)
	}
	return obj.(*hyrulekingdom.ZeldasCastle), nil
}

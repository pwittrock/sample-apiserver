/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package internalversion

import (
	hyrulekingdom "github.com/pwittrock/apiserver-helloworld/pkg/apis/hyrulekingdom"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ZeldasCastleSpecLister helps list ZeldasCastleSpecs.
type ZeldasCastleSpecLister interface {
	// List lists all ZeldasCastleSpecs in the indexer.
	List(selector labels.Selector) (ret []*hyrulekingdom.ZeldasCastleSpec, err error)
	// ZeldasCastleSpecs returns an object that can list and get ZeldasCastleSpecs.
	ZeldasCastleSpecs(namespace string) ZeldasCastleSpecNamespaceLister
	ZeldasCastleSpecListerExpansion
}

// zeldasCastleSpecLister implements the ZeldasCastleSpecLister interface.
type zeldasCastleSpecLister struct {
	indexer cache.Indexer
}

// NewZeldasCastleSpecLister returns a new ZeldasCastleSpecLister.
func NewZeldasCastleSpecLister(indexer cache.Indexer) ZeldasCastleSpecLister {
	return &zeldasCastleSpecLister{indexer: indexer}
}

// List lists all ZeldasCastleSpecs in the indexer.
func (s *zeldasCastleSpecLister) List(selector labels.Selector) (ret []*hyrulekingdom.ZeldasCastleSpec, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*hyrulekingdom.ZeldasCastleSpec))
	})
	return ret, err
}

// ZeldasCastleSpecs returns an object that can list and get ZeldasCastleSpecs.
func (s *zeldasCastleSpecLister) ZeldasCastleSpecs(namespace string) ZeldasCastleSpecNamespaceLister {
	return zeldasCastleSpecNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ZeldasCastleSpecNamespaceLister helps list and get ZeldasCastleSpecs.
type ZeldasCastleSpecNamespaceLister interface {
	// List lists all ZeldasCastleSpecs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*hyrulekingdom.ZeldasCastleSpec, err error)
	// Get retrieves the ZeldasCastleSpec from the indexer for a given namespace and name.
	Get(name string) (*hyrulekingdom.ZeldasCastleSpec, error)
	ZeldasCastleSpecNamespaceListerExpansion
}

// zeldasCastleSpecNamespaceLister implements the ZeldasCastleSpecNamespaceLister
// interface.
type zeldasCastleSpecNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ZeldasCastleSpecs in the indexer for a given namespace.
func (s zeldasCastleSpecNamespaceLister) List(selector labels.Selector) (ret []*hyrulekingdom.ZeldasCastleSpec, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*hyrulekingdom.ZeldasCastleSpec))
	})
	return ret, err
}

// Get retrieves the ZeldasCastleSpec from the indexer for a given namespace and name.
func (s zeldasCastleSpecNamespaceLister) Get(name string) (*hyrulekingdom.ZeldasCastleSpec, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(hyrulekingdom.Resource("zeldascastlespec"), name)
	}
	return obj.(*hyrulekingdom.ZeldasCastleSpec), nil
}

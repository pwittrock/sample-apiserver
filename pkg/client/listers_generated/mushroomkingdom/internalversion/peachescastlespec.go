/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package internalversion

import (
	mushroomkingdom "github.com/pwittrock/apiserver-helloworld/pkg/apis/mushroomkingdom"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PeachesCastleSpecLister helps list PeachesCastleSpecs.
type PeachesCastleSpecLister interface {
	// List lists all PeachesCastleSpecs in the indexer.
	List(selector labels.Selector) (ret []*mushroomkingdom.PeachesCastleSpec, err error)
	// PeachesCastleSpecs returns an object that can list and get PeachesCastleSpecs.
	PeachesCastleSpecs(namespace string) PeachesCastleSpecNamespaceLister
	PeachesCastleSpecListerExpansion
}

// peachesCastleSpecLister implements the PeachesCastleSpecLister interface.
type peachesCastleSpecLister struct {
	indexer cache.Indexer
}

// NewPeachesCastleSpecLister returns a new PeachesCastleSpecLister.
func NewPeachesCastleSpecLister(indexer cache.Indexer) PeachesCastleSpecLister {
	return &peachesCastleSpecLister{indexer: indexer}
}

// List lists all PeachesCastleSpecs in the indexer.
func (s *peachesCastleSpecLister) List(selector labels.Selector) (ret []*mushroomkingdom.PeachesCastleSpec, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*mushroomkingdom.PeachesCastleSpec))
	})
	return ret, err
}

// PeachesCastleSpecs returns an object that can list and get PeachesCastleSpecs.
func (s *peachesCastleSpecLister) PeachesCastleSpecs(namespace string) PeachesCastleSpecNamespaceLister {
	return peachesCastleSpecNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PeachesCastleSpecNamespaceLister helps list and get PeachesCastleSpecs.
type PeachesCastleSpecNamespaceLister interface {
	// List lists all PeachesCastleSpecs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*mushroomkingdom.PeachesCastleSpec, err error)
	// Get retrieves the PeachesCastleSpec from the indexer for a given namespace and name.
	Get(name string) (*mushroomkingdom.PeachesCastleSpec, error)
	PeachesCastleSpecNamespaceListerExpansion
}

// peachesCastleSpecNamespaceLister implements the PeachesCastleSpecNamespaceLister
// interface.
type peachesCastleSpecNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PeachesCastleSpecs in the indexer for a given namespace.
func (s peachesCastleSpecNamespaceLister) List(selector labels.Selector) (ret []*mushroomkingdom.PeachesCastleSpec, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*mushroomkingdom.PeachesCastleSpec))
	})
	return ret, err
}

// Get retrieves the PeachesCastleSpec from the indexer for a given namespace and name.
func (s peachesCastleSpecNamespaceLister) Get(name string) (*mushroomkingdom.PeachesCastleSpec, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(mushroomkingdom.Resource("peachescastlespec"), name)
	}
	return obj.(*mushroomkingdom.PeachesCastleSpec), nil
}

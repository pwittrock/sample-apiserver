/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package internalversion

import (
	mushroomkingdom "github.com/pwittrock/apiserver-helloworld/pkg/apis/mushroomkingdom"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PeachesCastleStatusLister helps list PeachesCastleStatuses.
type PeachesCastleStatusLister interface {
	// List lists all PeachesCastleStatuses in the indexer.
	List(selector labels.Selector) (ret []*mushroomkingdom.PeachesCastleStatus, err error)
	// PeachesCastleStatuses returns an object that can list and get PeachesCastleStatuses.
	PeachesCastleStatuses(namespace string) PeachesCastleStatusNamespaceLister
	PeachesCastleStatusListerExpansion
}

// peachesCastleStatusLister implements the PeachesCastleStatusLister interface.
type peachesCastleStatusLister struct {
	indexer cache.Indexer
}

// NewPeachesCastleStatusLister returns a new PeachesCastleStatusLister.
func NewPeachesCastleStatusLister(indexer cache.Indexer) PeachesCastleStatusLister {
	return &peachesCastleStatusLister{indexer: indexer}
}

// List lists all PeachesCastleStatuses in the indexer.
func (s *peachesCastleStatusLister) List(selector labels.Selector) (ret []*mushroomkingdom.PeachesCastleStatus, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*mushroomkingdom.PeachesCastleStatus))
	})
	return ret, err
}

// PeachesCastleStatuses returns an object that can list and get PeachesCastleStatuses.
func (s *peachesCastleStatusLister) PeachesCastleStatuses(namespace string) PeachesCastleStatusNamespaceLister {
	return peachesCastleStatusNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PeachesCastleStatusNamespaceLister helps list and get PeachesCastleStatuses.
type PeachesCastleStatusNamespaceLister interface {
	// List lists all PeachesCastleStatuses in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*mushroomkingdom.PeachesCastleStatus, err error)
	// Get retrieves the PeachesCastleStatus from the indexer for a given namespace and name.
	Get(name string) (*mushroomkingdom.PeachesCastleStatus, error)
	PeachesCastleStatusNamespaceListerExpansion
}

// peachesCastleStatusNamespaceLister implements the PeachesCastleStatusNamespaceLister
// interface.
type peachesCastleStatusNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PeachesCastleStatuses in the indexer for a given namespace.
func (s peachesCastleStatusNamespaceLister) List(selector labels.Selector) (ret []*mushroomkingdom.PeachesCastleStatus, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*mushroomkingdom.PeachesCastleStatus))
	})
	return ret, err
}

// Get retrieves the PeachesCastleStatus from the indexer for a given namespace and name.
func (s peachesCastleStatusNamespaceLister) Get(name string) (*mushroomkingdom.PeachesCastleStatus, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(mushroomkingdom.Resource("peachescastlestatus"), name)
	}
	return obj.(*mushroomkingdom.PeachesCastleStatus), nil
}
